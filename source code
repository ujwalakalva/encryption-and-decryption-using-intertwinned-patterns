import tkinter as tk
from tkinter import *
from PIL import Image,ImageTk
from tkinter import messagebox
from tkinter import Tk,Label,PhotoImage
import pygame

pygame.mixer.init()


def find_constant_step(char_index_list):
    constant_step = None

    for index in range(len(char_index_list) - 1):
        char1 = char_index_list[index]
        char2 = char_index_list[index + 1]

        # wraparound allowed so using modulus
        curr_step = (char2 - char1) % 26
        # print( chr(char1+65) +  "-->" + chr(char2+65) + " : " + str(curr_step))

        if constant_step and constant_step != curr_step:
            # print("invalid pattern : step broken : ", char_index_list)
            return

        constant_step = curr_step

    return constant_step
def get_extended_char_list(char_index_list, constant_step, char_len=None):
    prev_char_index = char_index_list[-1]

    char_len = len(char_index_list) if char_len is None else char_len

    extended_char_list = []
    for index in range(char_len):
        curr_char_index = (prev_char_index + constant_step) % 26
        extended_char_list.append(chr(curr_char_index + 65))
        prev_char_index = curr_char_index

    return extended_char_list

def get_extended_name_char_list(name, constant_step):
    # existing code

    name_index_list = get_index_list(name)

    extended_char_list = []
    for index in range(len(name_index_list)):
        curr_char_index = (name_index_list[index] + constant_step) % 26
        extended_char_list.append(chr(curr_char_index + 65))

    return extended_char_list

def get_index_list(curr_string):
    # existing code
    curr_index_list = [ord(c) - 65 for c in curr_string]

    return curr_index_list


def get_extended_string(orig_string, extended_char_len=None):
    orig_index_list = get_index_list(orig_string)

    # problem statement mentioned 2 or 3 intertwinned patterns in a string
    for pattern_count in [2, 3]:
        pattern_index_list = []
        for pattern_num in range(pattern_count):
            pattern_index_list.append([])
            for char_index in range(pattern_num, len(orig_index_list), pattern_count):
                pattern_index_list[pattern_num].append(orig_index_list[char_index])

        # print("orig_string : ", orig_string)
        # print("orig index_list : ", orig_index_list)
        # print("intertwined pattern count ", pattern_count)
        # print("intertwined pattern index list ", pattern_index_list)

        pattern_broken_flag = False
        extended_pattern_char_list = []
        for curr_pattern_index_list in pattern_index_list:
            constant_step = find_constant_step(curr_pattern_index_list)
            if constant_step is None:
                pattern_broken_flag = True
                break
            curr_extended_char_list = get_extended_char_list(curr_pattern_index_list, constant_step, extended_char_len)

            extended_pattern_char_list.append(curr_extended_char_list)

        if pattern_broken_flag:
            continue

        return extended_pattern_char_list

def encrypt():
    encrypt_key = key_entry.get().upper()
    name = name_entry.get().upper()
    encrypt_step = int(step_entry.get())

    extended_key_char_list = get_extended_string(encrypt_key, extended_char_len=len(name))

    if extended_key_char_list:
        extended_name_char_list = get_extended_name_char_list(name, encrypt_step)
        encrypted_pattern_char_list = [extended_name_char_list]
        encrypted_pattern_char_list.extend(extended_key_char_list)

        encrypted_char_list = []
        for index in range(len(extended_name_char_list)):
            for pattern_index in range(len(encrypted_pattern_char_list)):
                encrypted_char_list.append(encrypted_pattern_char_list[pattern_index][index])

        encrypted_string = "".join(encrypted_char_list)
        result_label.config(text="Encrypted string: " + encrypted_string)
    else:
        messagebox.showerror("Error", encrypt_key + ": 'intertwined pattern not found in encrypt key'")

def decrypt():
    encrypt_key = key_entry.get().upper()
    encrypted_string = encrypted_entry.get().upper()
    encrypt_step = int(step_entry.get())

    extended_key_char_list = get_extended_string(encrypt_key, extended_char_len=len(encrypted_string))

    if extended_key_char_list:
        pattern_count = len(extended_key_char_list)
        encrypted_name_char_list = [encrypted_string[char_index] for char_index in range(0, len(encrypted_string), pattern_count+1)]
        name_char_list = get_extended_name_char_list(encrypted_name_char_list, -1*encrypt_step)
        decrypted_name = "".join(name_char_list)
        result_label.config(text="Decrypted name: " + decrypted_name)
    else:
        messagebox.showerror("Error", encrypt_key + ": 'intertwined pattern not found in encrypt key'")


root = tk.Tk()
root.title("Encrypt/Decrypt Tool")
root.geometry("900x900")
root.configure(bg='lavender')

image = Image.open(r"C:\Users\user\Downloads\ENCRYPTION.jpeg")

# Resize the image to fit the window size
image = image.resize((root.winfo_screenwidth(), root.winfo_screenheight()))

# Create a PhotoImage object with the resized image
background_image = ImageTk.PhotoImage(image)

# Create a Label widget with the background image
background_label = Label(root, image=background_image)
background_label.place(x=0, y=0, relwidth=1, relheight=1)


# Key input
key_label = tk.Label(root, text="Enter Encrypt Key:")
key_label.pack(pady=(10,0))
key_entry = tk.Entry(root)
key_entry.pack()

# Name input
name_label = tk.Label(root, text="Message:")
name_label.pack(pady=(10,0))
name_entry = tk.Entry(root)
name_entry.pack()

# Step input
step_label = tk.Label(root, text="Enter Step Value:")
step_label.pack(pady=(10,0))
step_entry = tk.Entry(root)
step_entry.pack()

# Encrypt button
encrypt_button = tk.Button(root, text="Encrypt", command=encrypt,font=("italic",20),bg='lightsteelblue',fg='black')
encrypt_button.pack(pady=(10,0))
pygame.mixer.Sound(r"C:\Users\user\Downloads\click-button-140881 (2).mp3").play()


# Encrypted string input
encrypted_label = tk.Label(root, text="Enter Encrypted String:")
encrypted_label.pack(pady=(10,0))
encrypted_entry = tk.Entry(root)
encrypted_entry.pack()

# Decrypt button
decrypt_button = tk.Button(root, text="Decrypt", command=decrypt,font=("italic",20),bg='slategray',fg='black')
decrypt_button.pack(pady=(20,0))


# Result label
result_label = tk.Label(root, text="")
result_label.pack(pady=(20,0))

root.mainloop()
